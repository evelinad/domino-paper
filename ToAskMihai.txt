1. P4 talk went off ok. DONE

2. Return statement desugaring.

For each statement, compute a predicate saying when it is executed.
Statement after return statement in the same block is the predicate it would have and negation of return statement's predicate.

Do it first for the same block.
If an if-statement has the return, percolate it to the outer block.

Generalize it across basic blocks.

Write it by hand for a little program first, and then figure out the general rule.

Do the same for a switch statement, except for the fall-through break.

3. Instruction set design problem. DONE

4. Interpreter for demo.

With a parse tree, an interpreter in C++/Python is straightforward.
Just maintain the global variables in a symbol table
and all other statements are evaluated recursively.
Environment could be a symbol table, but could be a stack or heap.

Partial programs evaluation: Any language with a repl loop.
Use something off the shelf.
LINQ path in C#. Probably use Python. Define semantics for the block
statement.

Python in the interactive code. Use it first.

Program you type could become a valid expression in Python.

5. Generating P4 code.


QBF: We use 2 QBF, so it shouldn't be too hard.
Number of quantifier alternations that are required: that's the metric of
interest.

Dexter Kozen's work: Quantifier alternation.
