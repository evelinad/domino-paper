1. Tables are the best way to state contributions.
Simple tables that distinguish against compiler techniques: three-four rows.

Title: Packet transactions: Higher-level programming for wire-speed routers.
Nail things in the abstract.

Important messages-4 times : title, abstract, statement of contributions,
conclusion.

Abstract machine model: way to model constraints on stateful computation at
line rate.  Atom and atom template.  Counter is an example of why you need more
than just load and store. You can't pipeline it across stages.  And that's just
the counter. Make a forward reference to the table.

Motivate the all-or-nothing programming model at line rate. No intermediate
stance. This is very well known to hardware. The idea that software can do
this. All-or-nothing compilation paradigm: width of stages, length of pipeline,
stateful computations. Contrast it against software pipelining.  Two failure
modes: complexity of stateful atoms and width and length of pipeline.  There
are two ways to fail.

Discussion: Modularity, extensions, type checking.

Table of techniques: if conversion, SSA, read/write flanks, expression
flattening.  Keep the working example, but don't add too much detail so as to
not drown the reader.

Open up the techniques, figure out the right combination.
Pipelined virtual switch machine.

Don't overdo the SSA simplification message. Very philosophical message on
techniques being greatly simplified and adapted.

Just keep a table for this: original technique, difference. Put it at the end
of the compiler section and put in a forward reference. Emphasize that we have
to adapt and simplify techniques in compilers.

Helpful to tell people that everything in the eval. table is either implemented
in hardware or has been proposed in research and has never been implemented in
hardware. Emphasizes that these are existing programs, which are either not
programmable or not wire speed. Everything stateful we know of today is either
wirespeed and non progr. or prog. and not wirespeed.

At some point add a remark about P4:
---------------------------------------
--> P4 with UDFs: UDF is domino.
--> P4 expressiveness.

CAD tool:
------------------------------
--> Replace prop. delay with actual delay.
--> Report actual prop. delay as opposed to feasibility within a clock
frequency.
--> Instruction set selection is an afterthought in the discussion.
--> Otherwise it looks like it was pulled out of left field.

Psuedocode for stateful instructions and add this to the main text.
Maybe in terms of RISC or something else.
Develop a somewhat intuitive short hand for this stateful instruction.
Don't use SKETCH gratuituosly
Use it as a sequence of RISC instructions.

Another interesting idea:
----------------------------
Imagine a new piece of code that would require a more complicated instruction:
CoDel.
