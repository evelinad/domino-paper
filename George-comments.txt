1. Lisa and Lavanya's work:
They have to deal with storage allocation.
We don't have to deal with it. We have much smaller pieces of storage allocation.

2. Technology mapping and differences with SKETCH.
3. Differences between software pipelining and us.
4. Explain high-level goal clearly.
5. Make differences with Chlroophyll explicit.

6. Don't be apologetic about stealing ideas:

Table illustrating differences between us and prior work.

1. If conversion: long discarded but resurrected
2. Chlorophyll's mapping: x86 has too many parameters.
3. Software pipelining: scheduling vs. partitioning. TODO
4. Differences from technology mapping.
5. Why are the read and write flanks useful? TODO
6. Differences from traditional SSA.

Circuit depth and clock rate.

Why we chose some circuits?

Explain the low-level circuit details (PRAW, IfElseRaw, etc) much better.

Explain read and write flanks and their utility much better.
Explain why SCC are fundamental and optimal.

Difference from instruction set mapping.
Here if we miss we can't do line rate.
SKETCH's optimality is almost necessary for line rate,
which is not necessary for tiling and instruction selection.

Why can you use SKETCH? Instructions are small. and you want line rate.
Talk about how SKETCH is useful for a moving instruction set reference.

Similar arguments have been made for optimization problems.
